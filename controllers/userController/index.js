const { validate } = require("../../utils/joi")
const User = require('../../models/usermodel')
const { hashpassword, comparepass } = require('../../utils/bcrypt')
const { signtoken } = require("../../utils/verify")
module.exports.signup = async (req, res) => {

    //validating parameters
      const {error}  = await validate(req.body)
      if(error) return res.status(400).send(error.details[0].message)

      //checking if user exists
      const verify = await User.findOne({ username: req.body.username })
      if(verify) return res.status(400).send('user already exists')
      
     //encypting password
     const password = await hashpassword(req.body.password)

     //saving user details
     const user = await User.create({ username: req.body.username, password: password })
     if(user){
        const token = await signtoken(user._id)
        res.header('Auth-Token', token)
        res.status(200).json({user: user.username})
        }

}

module.exports.login = async (req, res) => {

     //validating parameters
     const {error}  = await validate(req.body)
     if(error) return res.status(400).send(error.details[0].message)

      // verifying username
      const verifyUsername = await User.findOne({ username: req.body.username })
      if(!verifyUsername) return res.status(400).send('username is invalid')

            // verifying password
            const verifyPassword = await comparepass(req.body.password, verifyUsername.password)
            if(!verifyPassword) return res.status(400).send('password is invalid')
            
            if(verifyUsername){
                const token = await signtoken(verifyUsername._id)
                res.header('Auth-Token', token)
                res.status(200).json({user: verifyUsername.username})
                }
}

module.exports.authuser = async (req, res) => {

  try {
    const user = await User.findById({ _id: req.user })
    res.status(200).json({user: user.username})
  } catch (error) {
    res.status(400).send("Access Denied")
  }
}